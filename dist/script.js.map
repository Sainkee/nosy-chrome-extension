{"mappings":"A,C,K;;;;;;;;;;;;;;;C,E,I,E,C,O,Q,W,A,E,E,G,C,E,C,C,G,yB,C,4B,E,yB,C,4B,E,+B,C,kC,E,wB,C,2B,E,+B,C,kC,C,E,G,C,E,C,C,G,gC,C,mC,E,mB,C,sB,E,sB,C,yB,E,e,C,kB,E,U,C,a,C,E,G,C,E,C,C,G,4B,C,+B,E,U,C,a,E,G,C,M,E,M,C,S,E,I,C,O,C,E,G,C,E,C,C,G,0B,C,6B,E,M,C,S,E,K,C,Q,C,E,G,C,E,C,C,G,yB,C,4B,E,I,C,O,E,U,C,a,E,M,C,S,E,U,C,a,E,K,C,Q,C,E,G,C,E,C,C,G,qB,C,wB,E,e,C,kB,E,kB,C,qB,E,mB,C,sB,E,c,C,iB,E,U,C,a,C,E,G,C,E,C,C,G,M,C,S,E,M,C,S,E,O,C,U,E,O,C,U,E,K,C,Q,E,M,C,Q;;;;;;;;;;;;;;;C,E,M,U,M,Y,C,C,C,K,C,C,4B,E,E,C,C,C,C,M,U,E,Y,C,C,C,C,C,K,C,G,I,C,Q,C,C,C,C,C,E,G,C,E,C,C,G,gB,C,kB,E,uB,C,wB,E,Y,C,c,E,a,C,e,E,oB,C,oB,O,E,Y,C,C,C,C,C,C,C,C,C,C,C,I,C,K,C,E,I,C,I,C,E,I,C,M,C,E,I,C,M,C,E,I,C,c,C,C,C,U,C,I,E,I,E,A,C,A,O,C,E,I,C,c,A,G,A,K,I,E,K,E,E,U,A,G,K,E,6C,K,I,C,K,I,I,C,I,E,C,O,I,C,M,E,C,G,U,E,C,C,C,e,E,C,C,C,C,C,E,I,E,G,C,G,C,A,C,E,M,M,E,Q,G,O,M,C,O,M,C,C,E,A,S,C,E,I,E,C,E,G,A,C,M,E,K,E,E,O,A,G,E,C,I,E,I,gB,E,E,M,C,W,I,E,K,G,E,O,E,E,M,C,C,C,O,C,E,I,C,O,O,Q,C,e,mB,oB,iB,iB,E,M,A,E,K,C,G,E,E,C,C,I,E,G,G,C,I,E,M,E,I,G,E,E,K,C,O,C,E,K,C,O,E,C,G,C,C,E,K,S,C,E,K,C,O,E,C,A,C,C,M,E,C,C,M,A,M,C,C,E,E,M,C,C,E,E,U,C,E,E,E,C,C,C,C,M,E,C,I,E,I,E,C,oB,E,E,Q,G,E,E,E,O,C,C,C,O,E,K,C,E,K,C,C,C,O,C,C;;;;;;;;;;;;;;;C,E,S,E,C,E,O,E,I,C,K,G,E,U,E,E,U,C,M,C,E,K,E,E,E,E,G,E,U,C,M,C,G,Q,I,C,C,kB,E,E,U,C,M,C,2H,C,E,E,E,U,C,E,E,M,I,E,C,E,E,G,C,C,G,M,A,C,A,O,C,E,A,O,C,E,A,O,C,E,A,O,C,E,A,E,U,A,G,A,K,I,E,K,E,C,C,E,C,O,A,G,A,K,I,E,K,E,E,K,A,G,A,K,I,E,K,E,C,C,E,A,G,A,K,I,E,K,E,E,I,A,E,A,E,U,C,E,C,O,C,K,C,G,C,C,C,K,C,C,G,G,I,C,I,E,C,G,E,c,C,M,I,E,C,oB,E,E,G,C,C,G,M,E,E,E,Y,C,K,G,E,U,E,E,U,C,M,C,E,K,E,E,E,E,G,E,U,C,M,C,G,Q,I,C,C,kB,E,E,U,C,M,C,oI,C,E,E,E,U,C,E,E,M,I,E,C,E,E,G,C,C,G,O,A,O,C,E,A,O,C,E,A,O,C,E,A,O,C,E,A,E,U,A,G,A,K,I,E,K,E,C,C,E,C,O,A,G,A,K,I,E,K,E,E,K,A,G,A,K,I,E,K,E,C,C,E,A,G,A,K,I,E,K,E,E,Y,A,C,G,E,c,C,M,I,E,C,6B,E,E,G,C,C,E,E,C,C,I,E,C,E,U,C,E,M,C,C,S,E,C,E,M,C,C,E,Y,E,E,Q,C,E,Y,C,C,S,E,C,E,I,E,E,E,I,E,G,G,A,C,C,E,U,E,A,I,E,U,C,M,A,G,E,c,C,G,uB,C,A,O,C,E,E,c,A,G,A,K,I,E,K,E,E,W,A,G,C,G,C,Q,E,E,c,C,W,C,C,A,E,C,A,O,C,E,E,c,A,G,A,K,I,E,K,E,E,kB,A,G,C,G,C,E,E,E,c,C,kB,C,C,A,O,G,A,O,C,E,E,U,A,G,A,K,I,E,K,E,C,C,E,C,C,I,E,E,U,C,E,C,E,K,G,C,6B,E,E,Y,C,C,C,E,a,E,C,G,C,E,E,E,a,C,C,A,E,C,O,C,C,S,E,C,E,O,I,Y,E,C,I,C,C,C,E,I,A,E,I,E,E,C,A,Y,O,iB,e;;;;;;;;;;;;;;;C,E,I,E,qC,e,E,C,E,I,E,E,C,E,E,S,G,O,C,G,C,K,C,C,M,C,C,C,M,E,I,G,G,E,O,E,A,S,C,E,I,E,C,C,E,M,C,E,C,E,C,e,M,E,K,E,E,c,A,E,I,I,K,E,G,E,U,C,I,I,K,E,U,C,C,I,E,E,K,C,G,E,U,E,C,E,U,C,E,A,E,E,U,C,E,E,C,E,U,C,E,C,C,M,E,K,A,C,E,E,U,C,E,C,gB,C,E,gB,C,E,U,C,E,C,Y,C,E,Y,C,E,U,C,E,C,a,C,E,a,C,E,U,C,E,C,a,C,E,a,C,E,O,E,E,O,C,K,C,C,E,U,C,E,C,O,E,C,E,U,C,E,C,O,C,C,K,E,O,C,I,E,O,M,E,A,C,E,I,E,C,E,I,I,K,E,O,C,K,C,E,I,E,C,E,I,C,E,I,A,E,E,Y,E,C,E,Y,C,E,Y,A,E,I,O,I,C,G,M,E,C,E,I,C,E,E,E,U,C,E,C,O,C,K,C,I,C,E,C,C,O,C,E,I,E,I,C,E,C,C;;;;;;;;;;;;;;;C,E,e,E,C,C,C,C,C,C,C,E,I,E,I,E,E,E,uB,C,E,C,E,G,O,A,S,C,E,G,C,E,E,C,A,A,C,S,C,E,I,E,E,S,G,O,I,e,C,M,C,E,I,E,G,O,A,S,I,O,E,I,G,I,C,C,C,M,C,C,K,C,C,Q,E,G,E,C,G,E,I,G,C,E,K,C,I,E,2B,M,C,E,K,G,M,C,I,E,A,C,G,C,E,K,C,G,K,G,C,G,C,E,K,K,C,C,C,E,C,C,M,E,C,E,K,C,I,E,C,8B,E,C,C,E,C,C,C,G,M,C,E,O,C,G,E,A,C,E,E,S,C,C,C,E,C,M,C,E,K,C,E,C,O,G,E,G,C,E,C,E,E,I,C,W,C,I,kB,O,C,M,C,C,K,G,G,M,C,O,A,S,C,E,O,A,S,C,C,C,C,C,E,G,C,O,a,C,M,A,U,wC,I,E,E,E,K,C,E,G,E,E,E,E,C,O,E,C,E,E,Q,E,S,E,U,C,C,O,a,C,C,W,O,I,A,E,E,S,E,C,E,C,C,E,E,C,C,C,E,C,S,C,E,O,I,Q,S,C,C,C,E,E,I,C,C,E,E,E,E,E,G,E,E,E,E,C,C,C,S,E,C,C,C,E,G,K,C,E,E,C,C,E,C,I,K,Y,E,Q,O,C,E,K,C,C,E,I,C,E,G,E,C,C,E,C,E,C,E,C,M,E,C,E,C,C,E,C,E,C,E,C,C,S,E,C,E,E,O,E,C,S,E,C,E,E,Q,E,C,S,E,C,C,C,E,E,G,E,K,G,A,E,M,E,E,C,C,E,C,E,C,C,C,E,C,E,C,C,E,I,C,U,Y,I,E,E,S,G,O,C,G,C,M,C,C,K,C,C,C,M,E,E,I,I,G,E,K,O,M,E,E,G,C,E,E,G,S,E,E,C,E,M,E,E,K,S,C,G,G,C,e,E,C,C,C,C,C,C,C,E,I,E,I,E,E,E,gB,C,E,C,E,G,E,M,E,E,K,S,C,G,G,M,C,S,E,M,E,I,G,C,C;;;;;;;;;;;;;;;C,E,S,E,C,E,I,E,E,C,G,A,U,O,E,E,C,C,K,C,E,M,I,I,K,E,A,U,O,E,E,I,C,C,K,C,G,E,I,C,G,O,A,S,C,E,I,E,C,K,O,M,E,A,E,E,C,K,W,M,E,A,E,E,C,E,E,C,E,I,I,K,E,qB,G,E,K,C,I,C,G,E,C,I,E,K,C,I,C,G,E,C,G,G,G,E,M,I,E,8H,G,C,G,C,E,M,I,E,2D,A,E,E,C,E,E,C,S,E,C,S,A,E,Q,C,E,C,S,C,E,G,A,C,C;;;;;;;;;;;;;;;C,E,I,E,C,O,a,e,mB,C,E,C,K,C,O,a,C,S,C,mB,C,M,C,O,e,A,E,E,C,K,C,Q,C,S,C,Q,C,M,C,O,W,A,E,E,c,O,E,Y,C,C,C,C,C,C,C,C,C,I,C,K,C,E,I,C,M,C,E,I,C,c,C,E,I,C,Q,C,E,C,I,C,Y,C,Q,O,G,I,C,O,C,E,C,M,E,K,E,E,O,A,I,A,S,C,E,I,E,I,I,K,E,C,G,C,K,C,C,M,C,C,C,E,G,C,G,A,S,E,M,I,E,C,8C,E,E,C,E,G,C,E,Q,C,G,M,I,E,C,yC,E,E,sB,E,K,S,C,G,C,E,G,C,M,O,C,G,M,I,E,+D,G,A,I,E,M,C,M,I,E,8C,I,E,C,K,E,W,E,a,E,iB,C,E,I,I,K,E,I,I,K,E,K,G,C,C,C,E,E,C,E,I,E,C,C,E,C,I,I,K,E,G,C,E,Q,C,I,C,C,E,C,E,M,I,E,C,mB,E,E,iB,E,E,M,C,E,G,G,C,A,C,C,E,C,Q,C,E,I,E,M,I,E,C,mB,E,E,gB,E,E,I,C,yB,E,K,S,C,G,C,E,E,C,C,E,E,O,E,I,C,Q,C,E,O,C,C,M,Y,C,O,M,I,C,Y,C,I,C,Q,A,C,M,Y,C,C,K,E,E,M,C,O,I,C,Y,C,I,E,E,G,E,C,e,A,O,C,E,I,C,M,A,G,A,K,I,E,K,E,E,c,C,iB,A,O,C,E,I,C,M,A,G,A,K,I,E,K,E,E,gB,C,M,A,O,C,E,I,C,M,A,G,A,K,I,E,K,E,E,K,C,S,I,I,C,Q,C,E,A,E,O,I,C,Y,C,I,C,Y,C,I,C,I,E,I,C,O,C,I,C,K,C,E,I,C,c,G,I,C,A,I,I,E,G,E,Q,C,U,E,E,Q,C,U,C,M,C,E,C,I,C,Q,C,I,C,G,I,E,O,M,C,C,M,E,C,K,O,E,A,O,C,E,E,Q,C,U,A,G,A,K,I,E,K,E,C,C,E,C,O,E,I,C,Q,C,I,C,E,K,C,I,E,E,E,Q,E,G,Q,I,C,C,gC,E,E,sC,C,C,C,E,C,G,M,I,C,Y,C,C,C,M,kB,C,C,C,I,E,E,C,O,I,C,Y,C,I,E,E,G,E,C,e,A,O,C,E,I,C,M,A,G,A,K,I,E,K,E,E,c,C,iB,A,O,C,E,I,C,M,A,G,A,K,I,E,K,E,E,gB,C,M,A,O,C,E,I,C,M,A,G,A,K,I,E,K,E,E,K,C,S,I,I,C,Q,C,E,A,E,E,E,I,C,O,C,I,C,K,C,E,I,C,c,E,O,I,C,Y,C,I,C,Y,C,I,C,I,G,K,C,A,I,M,A,M,E,G,I,C,A,G,E,Q,E,I,C,A,I,G,E,U,E,E,U,C,M,C,E,C,I,C,Q,C,I,C,G,I,E,O,M,C,C,E,E,U,C,E,C,O,C,C,E,I,E,C,E,I,C,O,E,I,C,Q,C,I,C,E,K,C,I,E,E,G,G,Q,I,C,C,sC,E,E,sC,C,C,C,G,K,C,A,I,E,O,G,G,Q,K,C,E,G,C,C,C;;;;;;;;;;;;;;;C,E,e,E,C,C,C,C,C,C,C,E,I,E,I,E,E,E,Y,C,E,C,E,C,G,M,A,C,M,E,E,K,S,C,O,M,C,O,M,C,C,E,G,C,M,C,I,E,E,I,E,C;;;;;;;;;;;;;;;C,E,e,E,C,C,C,C,C,C,C,E,I,E,I,E,E,E,a,C,E,C,E,C,G,M,A,C,M,E,E,K,S,C,G,E,E,I,E,C,e,E,C,C,C,C,C,C,C,E,I,E,I,E,E,E,oB,C,E,C,E,C,G,E,E,Q,C,G,C,A,G,O,M,C,O,M,C,C,E,G,C,M,C,I,M,A,C,M,E,E,K,S,C,C,S,C,G,E,E,I,E,C;;;;;;;;;;;;;;;C,E,M,E,Y,C,C,C,C,C,C,C,I,C,M,C,E,E,K,C,Q,C,K,I,C,K,C,E,K,C,I,C,K,C,C,O,E,E,K,C,C,C,I,C,gB,C,E,gB,E,C,E,I,C,c,C,E,c,E,E,C,I,C,K,C,E,K,C,I,C,c,C,G,C,C,C,M,gB,C,C,C,I,E,E,G,O,E,I,C,M,C,I,C,K,C,O,M,C,C,iB,I,C,gB,C,e,I,C,c,C,M,I,C,K,A,E,G,I,C,c,C,C,M,sB,C,C,C,I,E,E,G,O,E,I,C,M,C,I,C,K,C,O,M,C,C,iB,I,C,gB,C,e,I,C,c,C,M,I,C,K,A,E,G,I,C,c,C,C,U,C,C,C,O,I,E,I,C,M,C,I,C,K,C,O,M,C,C,M,I,C,K,A,E,G,I,C,c,C,C,M,Y,C,C,C,I,E,E,G,O,E,I,C,M,C,I,C,K,C,E,C,M,a,C,C,C,I,E,A,A,U,O,G,M,O,C,G,C,Q,E,E,E,E,O,E,I,C,M,C,I,C,K,C,E,C,M,mB,C,C,C,O,E,I,C,M,C,I,C,K,C,E,I,C,c,C,C,CCAA,IAAI,EAAO,SAAS,IAAI,CACpB,EAAM,SAAS,aAAa,CAAC,UAajC,GAZA,EAAI,YAAY,CAAC,KAAM,WACvB,EAAK,WAAW,CAAC,GAEjB,EAAI,gBAAgB,CAAC,QAAS,KAC5B,EAAI,eAAe,CAAC,YAChB,EAAI,YAAY,CAAC,YACnB,EAAY,KAAK,GAEjB,EAAY,IAAI,EAEpB,GAEI,sBAAuB,QAAU,4BAA6B,OAAQ,CAExE,I,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,EAAI,EAAc,GAAK,CAAA,OAAO,iBAAiB,EAC7C,OAAO,uBAAsB,AAAtB,CACT,CAAA,EAAY,IAAI,CAAG,QAEnB,EAAY,UAAU,CAAG,CAAA,EAEzB,EAAY,cAAc,CAAG,CAAA,EAE7B,EAAY,QAAQ,CAAG,SAAU,CAAK,EACpC,IAAI,EAAO,EAAM,OAAO,CAAC,EAAM,OAAO,CAAC,MAAM,CAAG,EAAE,CAAC,EAAE,CAAC,UAAU,CAEhE,EAAI,eAAe,CAAC,YAEpB,EADqB,EAAK,WAAW,GAEvC,CACF,CAEA,eAAe,EAAiB,CAAM,EACpC,QAAQ,GAAG,CAAC,QAAS,GACrB,IAAM,EAAQ,EAAM,kBAAkB,CAAC,CAAE,MAAO,YAAa,GAW7D,EAHmB,AADJ,AANA,CAAA,MAAM,EAAM,eAAe,CACxC,qFAEE,EAAA,EAGkB,QAAQ,CACF,IAAI,GAIlC,CASA,IAAM,EAAQ,I;;;;;;;;;;;;;;;C,E,M,Y,C,C,C,I,C,M,C,C,C,mB,C,C,C,C,C,G,C,E,K,C,M,I,E,4F,O,I,E,I,C,M,C,E,E,C,EAHE,2CAKhB,eAAe,EAAa,CAAU,MAgBhB,EAfpB,QAAQ,GAAG,CAAC,aAAc,GAC1B,IAAM,EAAQ,EAAM,kBAAkB,CAAC,CAAE,MAAO,YAAa,GASzD,GAMJ,QAAQ,GAAG,CAAC,sBADQ,EAPD,AADJ,AALA,CAAA,MAAM,EAAM,eAAe,CACxC,mGACE,EAFJ,EAKsB,QAAQ,CACF,IAAI,IAgBzB,AAHO,EAAa,KAAK,CAHZ,4CAMJ,2BAbhB,CAAA,OAAO,QAAQ,CAAC,IAAI,CAAG,CAEzB,CAyBA,SAAS,gBAAgB,CAAC,UAT1B,SAAuB,CAAK,EAEtB,EAAM,OAAO,EAAI,AAAe,UAAf,EAAM,IAAI,EAE7B,EAAI,KAAK,EAEb,E,C","sources":["<anon>","content_scripts/script.js","node_modules/@google/generative-ai/dist/index.mjs"],"sourcesContent":["(() => {\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Possible roles.\n * @public\n */ const $75df8972f0c81699$export$6c058c768f62ff69 = [\n    \"user\",\n    \"model\",\n    \"function\"\n];\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */ var $75df8972f0c81699$export$798c77e44df53af3;\n(function(HarmCategory) {\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n})($75df8972f0c81699$export$798c77e44df53af3 || ($75df8972f0c81699$export$798c77e44df53af3 = {}));\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */ var $75df8972f0c81699$export$b0bfc55fdde52aac;\n(function(HarmBlockThreshold) {\n    // Threshold is unspecified.\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    // Content with NEGLIGIBLE will be allowed.\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    // Content with NEGLIGIBLE and LOW will be allowed.\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    // All content will be allowed.\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})($75df8972f0c81699$export$b0bfc55fdde52aac || ($75df8972f0c81699$export$b0bfc55fdde52aac = {}));\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */ var $75df8972f0c81699$export$d51a615154b7f9a;\n(function(HarmProbability) {\n    // Probability is unspecified.\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    // Content has a negligible chance of being unsafe.\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    // Content has a low chance of being unsafe.\n    HarmProbability[\"LOW\"] = \"LOW\";\n    // Content has a medium chance of being unsafe.\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    // Content has a high chance of being unsafe.\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})($75df8972f0c81699$export$d51a615154b7f9a || ($75df8972f0c81699$export$d51a615154b7f9a = {}));\n/**\n * Reason that a prompt was blocked.\n * @public\n */ var $75df8972f0c81699$export$b022a9988c1688ba;\n(function(BlockReason) {\n    // A blocked reason was not specified.\n    BlockReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n    // Content was blocked by safety settings.\n    BlockReason[\"SAFETY\"] = \"SAFETY\";\n    // Content was blocked, but the reason is uncategorized.\n    BlockReason[\"OTHER\"] = \"OTHER\";\n})($75df8972f0c81699$export$b022a9988c1688ba || ($75df8972f0c81699$export$b022a9988c1688ba = {}));\n/**\n * Reason that a candidate finished.\n * @public\n */ var $75df8972f0c81699$export$e94f0100e6b2fa1a;\n(function(FinishReason) {\n    // Default value. This value is unused.\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    // Natural stop point of the model or provided stop sequence.\n    FinishReason[\"STOP\"] = \"STOP\";\n    // The maximum number of tokens as specified in the request was reached.\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    // The candidate content was flagged for safety reasons.\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    // The candidate content was flagged for recitation reasons.\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    // Unknown reason.\n    FinishReason[\"OTHER\"] = \"OTHER\";\n})($75df8972f0c81699$export$e94f0100e6b2fa1a || ($75df8972f0c81699$export$e94f0100e6b2fa1a = {}));\n/**\n * Task type for embedding content.\n * @public\n */ var $75df8972f0c81699$export$1f8b1cab05cab788;\n(function(TaskType) {\n    TaskType[\"TASK_TYPE_UNSPECIFIED\"] = \"TASK_TYPE_UNSPECIFIED\";\n    TaskType[\"RETRIEVAL_QUERY\"] = \"RETRIEVAL_QUERY\";\n    TaskType[\"RETRIEVAL_DOCUMENT\"] = \"RETRIEVAL_DOCUMENT\";\n    TaskType[\"SEMANTIC_SIMILARITY\"] = \"SEMANTIC_SIMILARITY\";\n    TaskType[\"CLASSIFICATION\"] = \"CLASSIFICATION\";\n    TaskType[\"CLUSTERING\"] = \"CLUSTERING\";\n})($75df8972f0c81699$export$1f8b1cab05cab788 || ($75df8972f0c81699$export$1f8b1cab05cab788 = {}));\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n * @public\n */ var $75df8972f0c81699$export$c6b94de590fea217;\n(function(FunctionDeclarationSchemaType) {\n    /** String type. */ FunctionDeclarationSchemaType[\"STRING\"] = \"STRING\";\n    /** Number type. */ FunctionDeclarationSchemaType[\"NUMBER\"] = \"NUMBER\";\n    /** Integer type. */ FunctionDeclarationSchemaType[\"INTEGER\"] = \"INTEGER\";\n    /** Boolean type. */ FunctionDeclarationSchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n    /** Array type. */ FunctionDeclarationSchemaType[\"ARRAY\"] = \"ARRAY\";\n    /** Object type. */ FunctionDeclarationSchemaType[\"OBJECT\"] = \"OBJECT\";\n})($75df8972f0c81699$export$c6b94de590fea217 || ($75df8972f0c81699$export$c6b94de590fea217 = {}));\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class $75df8972f0c81699$var$GoogleGenerativeAIError extends Error {\n    constructor(message){\n        super(`[GoogleGenerativeAI Error]: ${message}`);\n    }\n}\nclass $75df8972f0c81699$var$GoogleGenerativeAIResponseError extends $75df8972f0c81699$var$GoogleGenerativeAIError {\n    constructor(message, response){\n        super(message);\n        this.response = response;\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const $75df8972f0c81699$var$BASE_URL = \"https://generativelanguage.googleapis.com\";\nconst $75df8972f0c81699$var$DEFAULT_API_VERSION = \"v1\";\n/**\n * We can't `require` package.json if this runs on web. We will use rollup to\n * swap in the version number here at build time.\n */ const $75df8972f0c81699$var$PACKAGE_VERSION = \"0.3.1\";\nconst $75df8972f0c81699$var$PACKAGE_LOG_HEADER = \"genai-js\";\nvar $75df8972f0c81699$var$Task;\n(function(Task) {\n    Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n    Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n    Task[\"COUNT_TOKENS\"] = \"countTokens\";\n    Task[\"EMBED_CONTENT\"] = \"embedContent\";\n    Task[\"BATCH_EMBED_CONTENTS\"] = \"batchEmbedContents\";\n})($75df8972f0c81699$var$Task || ($75df8972f0c81699$var$Task = {}));\nclass $75df8972f0c81699$var$RequestUrl {\n    constructor(model, task, apiKey, stream, requestOptions){\n        this.model = model;\n        this.task = task;\n        this.apiKey = apiKey;\n        this.stream = stream;\n        this.requestOptions = requestOptions;\n    }\n    toString() {\n        var _a;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || $75df8972f0c81699$var$DEFAULT_API_VERSION;\n        let url = `${$75df8972f0c81699$var$BASE_URL}/${apiVersion}/${this.model}:${this.task}`;\n        if (this.stream) url += \"?alt=sse\";\n        return url;\n    }\n}\n/**\n * Simple, but may become more complex if we add more versions to log.\n */ function $75df8972f0c81699$var$getClientHeaders() {\n    return `${$75df8972f0c81699$var$PACKAGE_LOG_HEADER}/${$75df8972f0c81699$var$PACKAGE_VERSION}`;\n}\nasync function $75df8972f0c81699$var$makeRequest(url, body, requestOptions) {\n    let response;\n    try {\n        response = await fetch(url.toString(), Object.assign(Object.assign({}, $75df8972f0c81699$var$buildFetchOptions(requestOptions)), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-goog-api-client\": $75df8972f0c81699$var$getClientHeaders(),\n                \"x-goog-api-key\": url.apiKey\n            },\n            body: body\n        }));\n        if (!response.ok) {\n            let message = \"\";\n            try {\n                const json = await response.json();\n                message = json.error.message;\n                if (json.error.details) message += ` ${JSON.stringify(json.error.details)}`;\n            } catch (e) {\n            // ignored\n            }\n            throw new Error(`[${response.status} ${response.statusText}] ${message}`);\n        }\n    } catch (e) {\n        const err = new $75df8972f0c81699$var$GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);\n        err.stack = e.stack;\n        throw err;\n    }\n    return response;\n}\n/**\n * Generates the request options to be passed to the fetch API.\n * @param requestOptions - The user-defined request options.\n * @returns The generated request options.\n */ function $75df8972f0c81699$var$buildFetchOptions(requestOptions) {\n    const fetchOptions = {};\n    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n        const abortController = new AbortController();\n        const signal = abortController.signal;\n        setTimeout(()=>abortController.abort(), requestOptions.timeout);\n        fetchOptions.signal = signal;\n    }\n    return fetchOptions;\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Adds convenience helper methods to a response object, including stream\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\n */ function $75df8972f0c81699$var$addHelpers(response) {\n    response.text = ()=>{\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) console.warn(`This response had ${response.candidates.length} ` + `candidates. Returning text from the first candidate only. ` + `Access response.candidates directly to use the other candidates.`);\n            if ($75df8972f0c81699$var$hadBadFinishReason(response.candidates[0])) throw new $75df8972f0c81699$var$GoogleGenerativeAIResponseError(`${$75df8972f0c81699$var$formatBlockErrorMessage(response)}`, response);\n            return $75df8972f0c81699$var$getText(response);\n        } else if (response.promptFeedback) throw new $75df8972f0c81699$var$GoogleGenerativeAIResponseError(`Text not available. ${$75df8972f0c81699$var$formatBlockErrorMessage(response)}`, response);\n        return \"\";\n    };\n    response.functionCall = ()=>{\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) console.warn(`This response had ${response.candidates.length} ` + `candidates. Returning function call from the first candidate only. ` + `Access response.candidates directly to use the other candidates.`);\n            if ($75df8972f0c81699$var$hadBadFinishReason(response.candidates[0])) throw new $75df8972f0c81699$var$GoogleGenerativeAIResponseError(`${$75df8972f0c81699$var$formatBlockErrorMessage(response)}`, response);\n            return $75df8972f0c81699$var$getFunctionCall(response);\n        } else if (response.promptFeedback) throw new $75df8972f0c81699$var$GoogleGenerativeAIResponseError(`Function call not available. ${$75df8972f0c81699$var$formatBlockErrorMessage(response)}`, response);\n        return undefined;\n    };\n    return response;\n}\n/**\n * Returns text of first candidate.\n */ function $75df8972f0c81699$var$getText(response) {\n    var _a, _b, _c, _d;\n    if ((_d = (_c = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.text) return response.candidates[0].content.parts.map(({ text: text })=>text).join(\"\");\n    else return \"\";\n}\n/**\n * Returns functionCall of first candidate.\n */ function $75df8972f0c81699$var$getFunctionCall(response) {\n    var _a, _b, _c, _d;\n    return (_d = (_c = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.functionCall;\n}\nconst $75df8972f0c81699$var$badFinishReasons = [\n    $75df8972f0c81699$export$e94f0100e6b2fa1a.RECITATION,\n    $75df8972f0c81699$export$e94f0100e6b2fa1a.SAFETY\n];\nfunction $75df8972f0c81699$var$hadBadFinishReason(candidate) {\n    return !!candidate.finishReason && $75df8972f0c81699$var$badFinishReasons.includes(candidate.finishReason);\n}\nfunction $75df8972f0c81699$var$formatBlockErrorMessage(response) {\n    var _a, _b, _c;\n    let message = \"\";\n    if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {\n        message += \"Response was blocked\";\n        if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) message += ` due to ${response.promptFeedback.blockReason}`;\n        if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) message += `: ${response.promptFeedback.blockReasonMessage}`;\n    } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {\n        const firstCandidate = response.candidates[0];\n        if ($75df8972f0c81699$var$hadBadFinishReason(firstCandidate)) {\n            message += `Candidate was blocked due to ${firstCandidate.finishReason}`;\n            if (firstCandidate.finishMessage) message += `: ${firstCandidate.finishMessage}`;\n        }\n    }\n    return message;\n}\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ function $75df8972f0c81699$var$__await(v) {\n    return this instanceof $75df8972f0c81699$var$__await ? (this.v = v, this) : new $75df8972f0c81699$var$__await(v);\n}\nfunction $75df8972f0c81699$var$__asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof $75df8972f0c81699$var$__await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\ntypeof SuppressedError === \"function\" && SuppressedError;\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const $75df8972f0c81699$var$responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n */ function $75df8972f0c81699$var$processStream(response) {\n    const inputStream = response.body.pipeThrough(new TextDecoderStream(\"utf8\", {\n        fatal: true\n    }));\n    const responseStream = $75df8972f0c81699$var$getResponseStream(inputStream);\n    const [stream1, stream2] = responseStream.tee();\n    return {\n        stream: $75df8972f0c81699$var$generateResponseSequence(stream1),\n        response: $75df8972f0c81699$var$getResponsePromise(stream2)\n    };\n}\nasync function $75df8972f0c81699$var$getResponsePromise(stream) {\n    const allResponses = [];\n    const reader = stream.getReader();\n    while(true){\n        const { done: done, value: value } = await reader.read();\n        if (done) return $75df8972f0c81699$var$addHelpers($75df8972f0c81699$var$aggregateResponses(allResponses));\n        allResponses.push(value);\n    }\n}\nfunction $75df8972f0c81699$var$generateResponseSequence(stream) {\n    return $75df8972f0c81699$var$__asyncGenerator(this, arguments, function* generateResponseSequence_1() {\n        const reader = stream.getReader();\n        while(true){\n            const { value: value, done: done } = yield $75df8972f0c81699$var$__await(reader.read());\n            if (done) break;\n            yield yield $75df8972f0c81699$var$__await($75df8972f0c81699$var$addHelpers(value));\n        }\n    });\n}\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n */ function $75df8972f0c81699$var$getResponseStream(inputStream) {\n    const reader = inputStream.getReader();\n    const stream = new ReadableStream({\n        start (controller) {\n            let currentText = \"\";\n            return pump();\n            function pump() {\n                return reader.read().then(({ value: value, done: done })=>{\n                    if (done) {\n                        if (currentText.trim()) {\n                            controller.error(new $75df8972f0c81699$var$GoogleGenerativeAIError(\"Failed to parse stream\"));\n                            return;\n                        }\n                        controller.close();\n                        return;\n                    }\n                    currentText += value;\n                    let match = currentText.match($75df8972f0c81699$var$responseLineRE);\n                    let parsedResponse;\n                    while(match){\n                        try {\n                            parsedResponse = JSON.parse(match[1]);\n                        } catch (e) {\n                            controller.error(new $75df8972f0c81699$var$GoogleGenerativeAIError(`Error parsing JSON response: \"${match[1]}\"`));\n                            return;\n                        }\n                        controller.enqueue(parsedResponse);\n                        currentText = currentText.substring(match[0].length);\n                        match = currentText.match($75df8972f0c81699$var$responseLineRE);\n                    }\n                    return pump();\n                });\n            }\n        }\n    });\n    return stream;\n}\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n */ function $75df8972f0c81699$var$aggregateResponses(responses) {\n    const lastResponse = responses[responses.length - 1];\n    const aggregatedResponse = {\n        promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback\n    };\n    for (const response of responses){\n        if (response.candidates) for (const candidate of response.candidates){\n            const i = candidate.index;\n            if (!aggregatedResponse.candidates) aggregatedResponse.candidates = [];\n            if (!aggregatedResponse.candidates[i]) aggregatedResponse.candidates[i] = {\n                index: candidate.index\n            };\n            // Keep overwriting, the last one will be final\n            aggregatedResponse.candidates[i].citationMetadata = candidate.citationMetadata;\n            aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n            aggregatedResponse.candidates[i].finishMessage = candidate.finishMessage;\n            aggregatedResponse.candidates[i].safetyRatings = candidate.safetyRatings;\n            /**\n                 * Candidates should always have content and parts, but this handles\n                 * possible malformed responses.\n                 */ if (candidate.content && candidate.content.parts) {\n                if (!aggregatedResponse.candidates[i].content) aggregatedResponse.candidates[i].content = {\n                    role: candidate.content.role || \"user\",\n                    parts: []\n                };\n                const newPart = {};\n                for (const part of candidate.content.parts){\n                    if (part.text) newPart.text = part.text;\n                    if (part.functionCall) newPart.functionCall = part.functionCall;\n                    if (Object.keys(newPart).length === 0) newPart.text = \"\";\n                    aggregatedResponse.candidates[i].content.parts.push(newPart);\n                }\n            }\n        }\n    }\n    return aggregatedResponse;\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ async function $75df8972f0c81699$var$generateContentStream(apiKey, model, params, requestOptions) {\n    const url = new $75df8972f0c81699$var$RequestUrl(model, $75df8972f0c81699$var$Task.STREAM_GENERATE_CONTENT, apiKey, /* stream */ true, requestOptions);\n    const response = await $75df8972f0c81699$var$makeRequest(url, JSON.stringify(params), requestOptions);\n    return $75df8972f0c81699$var$processStream(response);\n}\nasync function $75df8972f0c81699$var$generateContent(apiKey, model, params, requestOptions) {\n    const url = new $75df8972f0c81699$var$RequestUrl(model, $75df8972f0c81699$var$Task.GENERATE_CONTENT, apiKey, /* stream */ false, requestOptions);\n    const response = await $75df8972f0c81699$var$makeRequest(url, JSON.stringify(params), requestOptions);\n    const responseJson = await response.json();\n    const enhancedResponse = $75df8972f0c81699$var$addHelpers(responseJson);\n    return {\n        response: enhancedResponse\n    };\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function $75df8972f0c81699$var$formatNewContent(request) {\n    let newParts = [];\n    if (typeof request === \"string\") newParts = [\n        {\n            text: request\n        }\n    ];\n    else {\n        for (const partOrString of request)if (typeof partOrString === \"string\") newParts.push({\n            text: partOrString\n        });\n        else newParts.push(partOrString);\n    }\n    return $75df8972f0c81699$var$assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @private\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */ function $75df8972f0c81699$var$assignRoleToPartsAndValidateSendMessageRequest(parts) {\n    const userContent = {\n        role: \"user\",\n        parts: []\n    };\n    const functionContent = {\n        role: \"function\",\n        parts: []\n    };\n    let hasUserContent = false;\n    let hasFunctionContent = false;\n    for (const part of parts)if (\"functionResponse\" in part) {\n        functionContent.parts.push(part);\n        hasFunctionContent = true;\n    } else {\n        userContent.parts.push(part);\n        hasUserContent = true;\n    }\n    if (hasUserContent && hasFunctionContent) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(\"Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.\");\n    if (!hasUserContent && !hasFunctionContent) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(\"No content is provided for sending chat message.\");\n    if (hasUserContent) return userContent;\n    return functionContent;\n}\nfunction $75df8972f0c81699$var$formatGenerateContentInput(params) {\n    if (params.contents) return params;\n    else {\n        const content = $75df8972f0c81699$var$formatNewContent(params);\n        return {\n            contents: [\n                content\n            ]\n        };\n    }\n}\nfunction $75df8972f0c81699$var$formatEmbedContentInput(params) {\n    if (typeof params === \"string\" || Array.isArray(params)) {\n        const content = $75df8972f0c81699$var$formatNewContent(params);\n        return {\n            content: content\n        };\n    }\n    return params;\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ // https://ai.google.dev/api/rest/v1beta/Content#part\nconst $75df8972f0c81699$var$VALID_PART_FIELDS = [\n    \"text\",\n    \"inlineData\",\n    \"functionCall\",\n    \"functionResponse\"\n];\nconst $75df8972f0c81699$var$VALID_PARTS_PER_ROLE = {\n    user: [\n        \"text\",\n        \"inlineData\"\n    ],\n    function: [\n        \"functionResponse\"\n    ],\n    model: [\n        \"text\",\n        \"functionCall\"\n    ]\n};\nconst $75df8972f0c81699$var$VALID_PREVIOUS_CONTENT_ROLES = {\n    user: [\n        \"model\"\n    ],\n    function: [\n        \"model\"\n    ],\n    model: [\n        \"user\",\n        \"function\"\n    ]\n};\nfunction $75df8972f0c81699$var$validateChatHistory(history) {\n    let prevContent;\n    for (const currContent of history){\n        const { role: role, parts: parts } = currContent;\n        if (!prevContent && role !== \"user\") throw new $75df8972f0c81699$var$GoogleGenerativeAIError(`First content should be with role 'user', got ${role}`);\n        if (!$75df8972f0c81699$export$6c058c768f62ff69.includes(role)) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(`Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify($75df8972f0c81699$export$6c058c768f62ff69)}`);\n        if (!Array.isArray(parts)) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(\"Content should have 'parts' property with an array of Parts\");\n        if (parts.length === 0) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(\"Each Content should have at least one part\");\n        const countFields = {\n            text: 0,\n            inlineData: 0,\n            functionCall: 0,\n            functionResponse: 0\n        };\n        for (const part of parts){\n            for (const key of $75df8972f0c81699$var$VALID_PART_FIELDS)if (key in part) countFields[key] += 1;\n        }\n        const validParts = $75df8972f0c81699$var$VALID_PARTS_PER_ROLE[role];\n        for (const key of $75df8972f0c81699$var$VALID_PART_FIELDS){\n            if (!validParts.includes(key) && countFields[key] > 0) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(`Content with role '${role}' can't contain '${key}' part`);\n        }\n        if (prevContent) {\n            const validPreviousContentRoles = $75df8972f0c81699$var$VALID_PREVIOUS_CONTENT_ROLES[role];\n            if (!validPreviousContentRoles.includes(prevContent.role)) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(`Content with role '${role}' can't follow '${prevContent.role}'. Valid previous roles: ${JSON.stringify($75df8972f0c81699$var$VALID_PREVIOUS_CONTENT_ROLES)}`);\n        }\n        prevContent = currContent;\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Do not log a message for this error.\n */ const $75df8972f0c81699$var$SILENT_ERROR = \"SILENT_ERROR\";\n/**\n * ChatSession class that enables sending chat messages and stores\n * history of sent and received messages so far.\n *\n * @public\n */ class $75df8972f0c81699$export$468095fbe5978cf0 {\n    constructor(apiKey, model, params, requestOptions){\n        this.model = model;\n        this.params = params;\n        this.requestOptions = requestOptions;\n        this._history = [];\n        this._sendPromise = Promise.resolve();\n        this._apiKey = apiKey;\n        if (params === null || params === void 0 ? void 0 : params.history) {\n            $75df8972f0c81699$var$validateChatHistory(params.history);\n            this._history = params.history;\n        }\n    }\n    /**\n     * Gets the chat history so far. Blocked prompts are not added to history.\n     * Blocked candidates are not added to history, nor are the prompts that\n     * generated them.\n     */ async getHistory() {\n        await this._sendPromise;\n        return this._history;\n    }\n    /**\n     * Sends a chat message and receives a non-streaming\n     * {@link GenerateContentResult}\n     */ async sendMessage(request) {\n        var _a, _b, _c;\n        await this._sendPromise;\n        const newContent = $75df8972f0c81699$var$formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            contents: [\n                ...this._history,\n                newContent\n            ]\n        };\n        let finalResult;\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise.then(()=>$75df8972f0c81699$var$generateContent(this._apiKey, this.model, generateContentRequest, this.requestOptions)).then((result)=>{\n            var _a;\n            if (result.response.candidates && result.response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({\n                    parts: [],\n                    // Response seems to come back without a role set.\n                    role: \"model\"\n                }, (_a = result.response.candidates) === null || _a === void 0 ? void 0 : _a[0].content);\n                this._history.push(responseContent);\n            } else {\n                const blockErrorMessage = $75df8972f0c81699$var$formatBlockErrorMessage(result.response);\n                if (blockErrorMessage) console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n            }\n            finalResult = result;\n        });\n        await this._sendPromise;\n        return finalResult;\n    }\n    /**\n     * Sends a chat message and receives the response as a\n     * {@link GenerateContentStreamResult} containing an iterable stream\n     * and a response promise.\n     */ async sendMessageStream(request) {\n        var _a, _b, _c;\n        await this._sendPromise;\n        const newContent = $75df8972f0c81699$var$formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            contents: [\n                ...this._history,\n                newContent\n            ]\n        };\n        const streamPromise = $75df8972f0c81699$var$generateContentStream(this._apiKey, this.model, generateContentRequest, this.requestOptions);\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise.then(()=>streamPromise)// This must be handled to avoid unhandled rejection, but jump\n        // to the final catch block with a label to not log this error.\n        .catch((_ignored)=>{\n            throw new Error($75df8972f0c81699$var$SILENT_ERROR);\n        }).then((streamResult)=>streamResult.response).then((response)=>{\n            if (response.candidates && response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({}, response.candidates[0].content);\n                // Response seems to come back without a role set.\n                if (!responseContent.role) responseContent.role = \"model\";\n                this._history.push(responseContent);\n            } else {\n                const blockErrorMessage = $75df8972f0c81699$var$formatBlockErrorMessage(response);\n                if (blockErrorMessage) console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n            }\n        }).catch((e)=>{\n            // Errors in streamPromise are already catchable by the user as\n            // streamPromise is returned.\n            // Avoid duplicating the error message in logs.\n            if (e.message !== $75df8972f0c81699$var$SILENT_ERROR) // Users do not have access to _sendPromise to catch errors\n            // downstream from streamPromise, so they should not throw.\n            console.error(e);\n        });\n        return streamPromise;\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ async function $75df8972f0c81699$var$countTokens(apiKey, model, params, requestOptions) {\n    const url = new $75df8972f0c81699$var$RequestUrl(model, $75df8972f0c81699$var$Task.COUNT_TOKENS, apiKey, false, {});\n    const response = await $75df8972f0c81699$var$makeRequest(url, JSON.stringify(Object.assign(Object.assign({}, params), {\n        model: model\n    })), requestOptions);\n    return response.json();\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ async function $75df8972f0c81699$var$embedContent(apiKey, model, params, requestOptions) {\n    const url = new $75df8972f0c81699$var$RequestUrl(model, $75df8972f0c81699$var$Task.EMBED_CONTENT, apiKey, false, {});\n    const response = await $75df8972f0c81699$var$makeRequest(url, JSON.stringify(params), requestOptions);\n    return response.json();\n}\nasync function $75df8972f0c81699$var$batchEmbedContents(apiKey, model, params, requestOptions) {\n    const url = new $75df8972f0c81699$var$RequestUrl(model, $75df8972f0c81699$var$Task.BATCH_EMBED_CONTENTS, apiKey, false, {});\n    const requestsWithModel = params.requests.map((request)=>{\n        return Object.assign(Object.assign({}, request), {\n            model: model\n        });\n    });\n    const response = await $75df8972f0c81699$var$makeRequest(url, JSON.stringify({\n        requests: requestsWithModel\n    }), requestOptions);\n    return response.json();\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Class for generative model APIs.\n * @public\n */ class $75df8972f0c81699$export$a1cda57d165c63f4 {\n    constructor(apiKey, modelParams, requestOptions){\n        this.apiKey = apiKey;\n        if (modelParams.model.includes(\"/\")) // Models may be named \"models/model-name\" or \"tunedModels/model-name\"\n        this.model = modelParams.model;\n        else // If path is not included, assume it's a non-tuned model.\n        this.model = `models/${modelParams.model}`;\n        this.generationConfig = modelParams.generationConfig || {};\n        this.safetySettings = modelParams.safetySettings || [];\n        this.tools = modelParams.tools;\n        this.requestOptions = requestOptions || {};\n    }\n    /**\n     * Makes a single non-streaming call to the model\n     * and returns an object containing a single {@link GenerateContentResponse}.\n     */ async generateContent(request) {\n        const formattedParams = $75df8972f0c81699$var$formatGenerateContentInput(request);\n        return $75df8972f0c81699$var$generateContent(this.apiKey, this.model, Object.assign({\n            generationConfig: this.generationConfig,\n            safetySettings: this.safetySettings,\n            tools: this.tools\n        }, formattedParams), this.requestOptions);\n    }\n    /**\n     * Makes a single streaming call to the model\n     * and returns an object containing an iterable stream that iterates\n     * over all chunks in the streaming response as well as\n     * a promise that returns the final aggregated response.\n     */ async generateContentStream(request) {\n        const formattedParams = $75df8972f0c81699$var$formatGenerateContentInput(request);\n        return $75df8972f0c81699$var$generateContentStream(this.apiKey, this.model, Object.assign({\n            generationConfig: this.generationConfig,\n            safetySettings: this.safetySettings,\n            tools: this.tools\n        }, formattedParams), this.requestOptions);\n    }\n    /**\n     * Gets a new {@link ChatSession} instance which can be used for\n     * multi-turn chats.\n     */ startChat(startChatParams) {\n        return new $75df8972f0c81699$export$468095fbe5978cf0(this.apiKey, this.model, Object.assign({\n            tools: this.tools\n        }, startChatParams), this.requestOptions);\n    }\n    /**\n     * Counts the tokens in the provided request.\n     */ async countTokens(request) {\n        const formattedParams = $75df8972f0c81699$var$formatGenerateContentInput(request);\n        return $75df8972f0c81699$var$countTokens(this.apiKey, this.model, formattedParams);\n    }\n    /**\n     * Embeds the provided content.\n     */ async embedContent(request) {\n        const formattedParams = $75df8972f0c81699$var$formatEmbedContentInput(request);\n        return $75df8972f0c81699$var$embedContent(this.apiKey, this.model, formattedParams);\n    }\n    /**\n     * Embeds an array of {@link EmbedContentRequest}s.\n     */ async batchEmbedContents(batchEmbedContentRequest) {\n        return $75df8972f0c81699$var$batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, this.requestOptions);\n    }\n}\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /**\n * Top-level class for this SDK\n * @public\n */ class $75df8972f0c81699$export$63973badcb26c60 {\n    constructor(apiKey){\n        this.apiKey = apiKey;\n    }\n    /**\n     * Gets a {@link GenerativeModel} instance for the provided model name.\n     */ getGenerativeModel(modelParams, requestOptions) {\n        if (!modelParams.model) throw new $75df8972f0c81699$var$GoogleGenerativeAIError(`Must provide a model name. ` + `Example: genai.getGenerativeModel({ model: 'my-model-name' })`);\n        return new $75df8972f0c81699$export$a1cda57d165c63f4(this.apiKey, modelParams, requestOptions);\n    }\n}\n\n\nlet $f4f7efb374b8cc1a$var$body = document.body;\nlet $f4f7efb374b8cc1a$var$btn = document.createElement(\"button\");\n$f4f7efb374b8cc1a$var$btn.setAttribute(\"id\", \"btnNosy\");\n$f4f7efb374b8cc1a$var$body.appendChild($f4f7efb374b8cc1a$var$btn);\n$f4f7efb374b8cc1a$var$btn.addEventListener(\"click\", ()=>{\n    $f4f7efb374b8cc1a$var$btn.toggleAttribute(\"listener\");\n    if ($f4f7efb374b8cc1a$var$btn.hasAttribute(\"listener\")) $f4f7efb374b8cc1a$var$recognition.start();\n    else $f4f7efb374b8cc1a$var$recognition.stop();\n});\nif (\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window) {\n    // Create a new SpeechRecognition object\n    var $f4f7efb374b8cc1a$var$recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    $f4f7efb374b8cc1a$var$recognition.lang = \"en-US\";\n    // for only one time listen and stop\n    $f4f7efb374b8cc1a$var$recognition.continuous = false;\n    // result gives once after process\n    $f4f7efb374b8cc1a$var$recognition.interimResults = false;\n    $f4f7efb374b8cc1a$var$recognition.onresult = function(event) {\n        let data = event.results[event.results.length - 1][0].transcript;\n        $f4f7efb374b8cc1a$var$btn.removeAttribute(\"listener\");\n        let recognizedText = data.toLowerCase();\n        $f4f7efb374b8cc1a$var$generateResponse(recognizedText);\n    };\n}\nasync function $f4f7efb374b8cc1a$var$generateResponse(prompt) {\n    console.log(\"im in\", prompt);\n    const model = $f4f7efb374b8cc1a$var$genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n    });\n    const result = await model.generateContent(\"Give possible voice commands related to Amazon e-commerce website for the prompt -\" + // \"according to you user what is searching on this website give responce in 5 words go generate link accodingly -\" +\n    prompt);\n    let response = result.response;\n    let responseText = response.text();\n    // Check for navigation commands and perform navigation accordingly\n    $f4f7efb374b8cc1a$var$generateLink(responseText);\n}\nconst $f4f7efb374b8cc1a$var$API_KEY = \"AIzaSyCmd3guYR-kltQEsUeapkg66iQq1gE3RlI\";\n// Replace with your actual API key\nconst $f4f7efb374b8cc1a$var$genAI = new (0, $75df8972f0c81699$export$63973badcb26c60)($f4f7efb374b8cc1a$var$API_KEY);\nasync function $f4f7efb374b8cc1a$var$generateLink(Linkprompt) {\n    console.log(\"im in link\", Linkprompt);\n    const model = $f4f7efb374b8cc1a$var$genAI.getGenerativeModel({\n        model: \"gemini-pro\"\n    });\n    const result = await model.generateContent(\"Give possible link  related to Amazon e-commerce website for the prompt to set window.location -\" + Linkprompt);\n    let response = result.response;\n    let responseLink = response.text();\n    // console.log(\"hello this is link\", responseLink);\n    let linksToShow = $f4f7efb374b8cc1a$var$extractLinks(responseLink);\n    window.location.href = linksToShow;\n// linksToShow && linksToShow[0] ? linksToShow[0] : \"https://www.amazon.com/\";lin\n}\nfunction $f4f7efb374b8cc1a$var$extractLinks(responseText) {\n    console.log(\"im in extractedlink\", responseText);\n    // Define a regular expression pattern to match links\n    const linkPattern = /https?:\\/\\/(?:www\\.)?amazon\\.com\\/\\S+/gi;\n    // Extract links from the response text using the pattern\n    const links = responseText.match(linkPattern);\n    // Return the array of extracted links\n    return links || \" https://www.amazon.com/\"; // Return an empty array if no links are found\n}\n// handle keyPress events\nfunction $f4f7efb374b8cc1a$var$handleKeyDown(event) {\n    // Check if ctrl and Space keys are pressed simultaneously\n    if (event.ctrlKey && event.code === \"Space\") // Trigger button click event\n    $f4f7efb374b8cc1a$var$btn.click();\n}\n// Add event listener for keydown event\ndocument.addEventListener(\"keydown\", $f4f7efb374b8cc1a$var$handleKeyDown);\n\n})();\n//# sourceMappingURL=script.js.map\n","let body = document.body;\r\nlet btn = document.createElement(\"button\");\r\nbtn.setAttribute(\"id\", \"btnNosy\");\r\nbody.appendChild(btn);\r\n\r\nbtn.addEventListener(\"click\", () => {\r\n  btn.toggleAttribute(\"listener\");\r\n  if (btn.hasAttribute(\"listener\")) {\r\n    recognition.start();\r\n  } else {\r\n    recognition.stop();\r\n  }\r\n});\r\n\r\nif (\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window) {\r\n  // Create a new SpeechRecognition object\r\n  var recognition = new (window.SpeechRecognition ||\r\n    window.webkitSpeechRecognition)();\r\n  recognition.lang = \"en-US\";\r\n  // for only one time listen and stop\r\n  recognition.continuous = false;\r\n  // result gives once after process\r\n  recognition.interimResults = false;\r\n\r\n  recognition.onresult = function (event) {\r\n    let data = event.results[event.results.length - 1][0].transcript;\r\n\r\n    btn.removeAttribute(\"listener\");\r\n    let recognizedText = data.toLowerCase();\r\n    generateResponse(recognizedText);\r\n  };\r\n}\r\n\r\nasync function generateResponse(prompt) {\r\n  console.log(\"im in\", prompt);\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n  const result = await model.generateContent(\r\n    \"Give possible voice commands related to Amazon e-commerce website for the prompt -\" +\r\n      // \"according to you user what is searching on this website give responce in 5 words go generate link accodingly -\" +\r\n      prompt\r\n  );\r\n\r\n  let response = result.response;\r\n  let responseText = response.text();\r\n\r\n  // Check for navigation commands and perform navigation accordingly\r\n  generateLink(responseText);\r\n}\r\n\r\n// ai integration parts\r\n\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst API_KEY = \"AIzaSyCmd3guYR-kltQEsUeapkg66iQq1gE3RlI\";\r\n\r\n// Replace with your actual API key\r\nconst genAI = new GoogleGenerativeAI(API_KEY);\r\n\r\nasync function generateLink(Linkprompt) {\r\n  console.log(\"im in link\", Linkprompt);\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n  const result = await model.generateContent(\r\n    \"Give possible link  related to Amazon e-commerce website for the prompt to set window.location -\" +\r\n      Linkprompt\r\n  );\r\n\r\n  let response = result.response;\r\n  let responseLink = response.text();\r\n  // console.log(\"hello this is link\", responseLink);\r\n  let linksToShow = extractLinks(responseLink);\r\n  window.location.href = linksToShow;\r\n  // linksToShow && linksToShow[0] ? linksToShow[0] : \"https://www.amazon.com/\";lin\r\n}\r\n\r\nfunction extractLinks(responseText) {\r\n  console.log(\"im in extractedlink\", responseText);\r\n  // Define a regular expression pattern to match links\r\n  const linkPattern = /https?:\\/\\/(?:www\\.)?amazon\\.com\\/\\S+/gi;\r\n\r\n  // Extract links from the response text using the pattern\r\n  const links = responseText.match(linkPattern);\r\n\r\n  // Return the array of extracted links\r\n  return links || \" https://www.amazon.com/\"; // Return an empty array if no links are found\r\n}\r\n\r\n// handle keyPress events\r\n\r\nfunction handleKeyDown(event) {\r\n  // Check if ctrl and Space keys are pressed simultaneously\r\n  if (event.ctrlKey && event.code === \"Space\") {\r\n    // Trigger button click event\r\n    btn.click();\r\n  }\r\n}\r\n\r\n// Add event listener for keydown event\r\ndocument.addEventListener(\"keydown\", handleKeyDown);\r\n","/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Possible roles.\n * @public\n */\nconst POSSIBLE_ROLES = [\"user\", \"model\", \"function\"];\n/**\n * Harm categories that would cause prompts or candidates to be blocked.\n * @public\n */\nvar HarmCategory;\n(function (HarmCategory) {\n    HarmCategory[\"HARM_CATEGORY_UNSPECIFIED\"] = \"HARM_CATEGORY_UNSPECIFIED\";\n    HarmCategory[\"HARM_CATEGORY_HATE_SPEECH\"] = \"HARM_CATEGORY_HATE_SPEECH\";\n    HarmCategory[\"HARM_CATEGORY_SEXUALLY_EXPLICIT\"] = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\";\n    HarmCategory[\"HARM_CATEGORY_HARASSMENT\"] = \"HARM_CATEGORY_HARASSMENT\";\n    HarmCategory[\"HARM_CATEGORY_DANGEROUS_CONTENT\"] = \"HARM_CATEGORY_DANGEROUS_CONTENT\";\n})(HarmCategory || (HarmCategory = {}));\n/**\n * Threshold above which a prompt or candidate will be blocked.\n * @public\n */\nvar HarmBlockThreshold;\n(function (HarmBlockThreshold) {\n    // Threshold is unspecified.\n    HarmBlockThreshold[\"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"] = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\";\n    // Content with NEGLIGIBLE will be allowed.\n    HarmBlockThreshold[\"BLOCK_LOW_AND_ABOVE\"] = \"BLOCK_LOW_AND_ABOVE\";\n    // Content with NEGLIGIBLE and LOW will be allowed.\n    HarmBlockThreshold[\"BLOCK_MEDIUM_AND_ABOVE\"] = \"BLOCK_MEDIUM_AND_ABOVE\";\n    // Content with NEGLIGIBLE, LOW, and MEDIUM will be allowed.\n    HarmBlockThreshold[\"BLOCK_ONLY_HIGH\"] = \"BLOCK_ONLY_HIGH\";\n    // All content will be allowed.\n    HarmBlockThreshold[\"BLOCK_NONE\"] = \"BLOCK_NONE\";\n})(HarmBlockThreshold || (HarmBlockThreshold = {}));\n/**\n * Probability that a prompt or candidate matches a harm category.\n * @public\n */\nvar HarmProbability;\n(function (HarmProbability) {\n    // Probability is unspecified.\n    HarmProbability[\"HARM_PROBABILITY_UNSPECIFIED\"] = \"HARM_PROBABILITY_UNSPECIFIED\";\n    // Content has a negligible chance of being unsafe.\n    HarmProbability[\"NEGLIGIBLE\"] = \"NEGLIGIBLE\";\n    // Content has a low chance of being unsafe.\n    HarmProbability[\"LOW\"] = \"LOW\";\n    // Content has a medium chance of being unsafe.\n    HarmProbability[\"MEDIUM\"] = \"MEDIUM\";\n    // Content has a high chance of being unsafe.\n    HarmProbability[\"HIGH\"] = \"HIGH\";\n})(HarmProbability || (HarmProbability = {}));\n/**\n * Reason that a prompt was blocked.\n * @public\n */\nvar BlockReason;\n(function (BlockReason) {\n    // A blocked reason was not specified.\n    BlockReason[\"BLOCKED_REASON_UNSPECIFIED\"] = \"BLOCKED_REASON_UNSPECIFIED\";\n    // Content was blocked by safety settings.\n    BlockReason[\"SAFETY\"] = \"SAFETY\";\n    // Content was blocked, but the reason is uncategorized.\n    BlockReason[\"OTHER\"] = \"OTHER\";\n})(BlockReason || (BlockReason = {}));\n/**\n * Reason that a candidate finished.\n * @public\n */\nvar FinishReason;\n(function (FinishReason) {\n    // Default value. This value is unused.\n    FinishReason[\"FINISH_REASON_UNSPECIFIED\"] = \"FINISH_REASON_UNSPECIFIED\";\n    // Natural stop point of the model or provided stop sequence.\n    FinishReason[\"STOP\"] = \"STOP\";\n    // The maximum number of tokens as specified in the request was reached.\n    FinishReason[\"MAX_TOKENS\"] = \"MAX_TOKENS\";\n    // The candidate content was flagged for safety reasons.\n    FinishReason[\"SAFETY\"] = \"SAFETY\";\n    // The candidate content was flagged for recitation reasons.\n    FinishReason[\"RECITATION\"] = \"RECITATION\";\n    // Unknown reason.\n    FinishReason[\"OTHER\"] = \"OTHER\";\n})(FinishReason || (FinishReason = {}));\n/**\n * Task type for embedding content.\n * @public\n */\nvar TaskType;\n(function (TaskType) {\n    TaskType[\"TASK_TYPE_UNSPECIFIED\"] = \"TASK_TYPE_UNSPECIFIED\";\n    TaskType[\"RETRIEVAL_QUERY\"] = \"RETRIEVAL_QUERY\";\n    TaskType[\"RETRIEVAL_DOCUMENT\"] = \"RETRIEVAL_DOCUMENT\";\n    TaskType[\"SEMANTIC_SIMILARITY\"] = \"SEMANTIC_SIMILARITY\";\n    TaskType[\"CLASSIFICATION\"] = \"CLASSIFICATION\";\n    TaskType[\"CLUSTERING\"] = \"CLUSTERING\";\n})(TaskType || (TaskType = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Contains the list of OpenAPI data types\n * as defined by https://swagger.io/docs/specification/data-models/data-types/\n * @public\n */\nvar FunctionDeclarationSchemaType;\n(function (FunctionDeclarationSchemaType) {\n    /** String type. */\n    FunctionDeclarationSchemaType[\"STRING\"] = \"STRING\";\n    /** Number type. */\n    FunctionDeclarationSchemaType[\"NUMBER\"] = \"NUMBER\";\n    /** Integer type. */\n    FunctionDeclarationSchemaType[\"INTEGER\"] = \"INTEGER\";\n    /** Boolean type. */\n    FunctionDeclarationSchemaType[\"BOOLEAN\"] = \"BOOLEAN\";\n    /** Array type. */\n    FunctionDeclarationSchemaType[\"ARRAY\"] = \"ARRAY\";\n    /** Object type. */\n    FunctionDeclarationSchemaType[\"OBJECT\"] = \"OBJECT\";\n})(FunctionDeclarationSchemaType || (FunctionDeclarationSchemaType = {}));\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GoogleGenerativeAIError extends Error {\n    constructor(message) {\n        super(`[GoogleGenerativeAI Error]: ${message}`);\n    }\n}\nclass GoogleGenerativeAIResponseError extends GoogleGenerativeAIError {\n    constructor(message, response) {\n        super(message);\n        this.response = response;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst BASE_URL = \"https://generativelanguage.googleapis.com\";\nconst DEFAULT_API_VERSION = \"v1\";\n/**\n * We can't `require` package.json if this runs on web. We will use rollup to\n * swap in the version number here at build time.\n */\nconst PACKAGE_VERSION = \"0.3.1\";\nconst PACKAGE_LOG_HEADER = \"genai-js\";\nvar Task;\n(function (Task) {\n    Task[\"GENERATE_CONTENT\"] = \"generateContent\";\n    Task[\"STREAM_GENERATE_CONTENT\"] = \"streamGenerateContent\";\n    Task[\"COUNT_TOKENS\"] = \"countTokens\";\n    Task[\"EMBED_CONTENT\"] = \"embedContent\";\n    Task[\"BATCH_EMBED_CONTENTS\"] = \"batchEmbedContents\";\n})(Task || (Task = {}));\nclass RequestUrl {\n    constructor(model, task, apiKey, stream, requestOptions) {\n        this.model = model;\n        this.task = task;\n        this.apiKey = apiKey;\n        this.stream = stream;\n        this.requestOptions = requestOptions;\n    }\n    toString() {\n        var _a;\n        const apiVersion = ((_a = this.requestOptions) === null || _a === void 0 ? void 0 : _a.apiVersion) || DEFAULT_API_VERSION;\n        let url = `${BASE_URL}/${apiVersion}/${this.model}:${this.task}`;\n        if (this.stream) {\n            url += \"?alt=sse\";\n        }\n        return url;\n    }\n}\n/**\n * Simple, but may become more complex if we add more versions to log.\n */\nfunction getClientHeaders() {\n    return `${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`;\n}\nasync function makeRequest(url, body, requestOptions) {\n    let response;\n    try {\n        response = await fetch(url.toString(), Object.assign(Object.assign({}, buildFetchOptions(requestOptions)), { method: \"POST\", headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-goog-api-client\": getClientHeaders(),\n                \"x-goog-api-key\": url.apiKey,\n            }, body }));\n        if (!response.ok) {\n            let message = \"\";\n            try {\n                const json = await response.json();\n                message = json.error.message;\n                if (json.error.details) {\n                    message += ` ${JSON.stringify(json.error.details)}`;\n                }\n            }\n            catch (e) {\n                // ignored\n            }\n            throw new Error(`[${response.status} ${response.statusText}] ${message}`);\n        }\n    }\n    catch (e) {\n        const err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e.message}`);\n        err.stack = e.stack;\n        throw err;\n    }\n    return response;\n}\n/**\n * Generates the request options to be passed to the fetch API.\n * @param requestOptions - The user-defined request options.\n * @returns The generated request options.\n */\nfunction buildFetchOptions(requestOptions) {\n    const fetchOptions = {};\n    if ((requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeout) >= 0) {\n        const abortController = new AbortController();\n        const signal = abortController.signal;\n        setTimeout(() => abortController.abort(), requestOptions.timeout);\n        fetchOptions.signal = signal;\n    }\n    return fetchOptions;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Adds convenience helper methods to a response object, including stream\n * chunks (as long as each chunk is a complete GenerateContentResponse JSON).\n */\nfunction addHelpers(response) {\n    response.text = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning text from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            return getText(response);\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return \"\";\n    };\n    response.functionCall = () => {\n        if (response.candidates && response.candidates.length > 0) {\n            if (response.candidates.length > 1) {\n                console.warn(`This response had ${response.candidates.length} ` +\n                    `candidates. Returning function call from the first candidate only. ` +\n                    `Access response.candidates directly to use the other candidates.`);\n            }\n            if (hadBadFinishReason(response.candidates[0])) {\n                throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);\n            }\n            return getFunctionCall(response);\n        }\n        else if (response.promptFeedback) {\n            throw new GoogleGenerativeAIResponseError(`Function call not available. ${formatBlockErrorMessage(response)}`, response);\n        }\n        return undefined;\n    };\n    return response;\n}\n/**\n * Returns text of first candidate.\n */\nfunction getText(response) {\n    var _a, _b, _c, _d;\n    if ((_d = (_c = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.text) {\n        return response.candidates[0].content.parts\n            .map(({ text }) => text)\n            .join(\"\");\n    }\n    else {\n        return \"\";\n    }\n}\n/**\n * Returns functionCall of first candidate.\n */\nfunction getFunctionCall(response) {\n    var _a, _b, _c, _d;\n    return (_d = (_c = (_b = (_a = response.candidates) === null || _a === void 0 ? void 0 : _a[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.functionCall;\n}\nconst badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];\nfunction hadBadFinishReason(candidate) {\n    return (!!candidate.finishReason &&\n        badFinishReasons.includes(candidate.finishReason));\n}\nfunction formatBlockErrorMessage(response) {\n    var _a, _b, _c;\n    let message = \"\";\n    if ((!response.candidates || response.candidates.length === 0) &&\n        response.promptFeedback) {\n        message += \"Response was blocked\";\n        if ((_a = response.promptFeedback) === null || _a === void 0 ? void 0 : _a.blockReason) {\n            message += ` due to ${response.promptFeedback.blockReason}`;\n        }\n        if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {\n            message += `: ${response.promptFeedback.blockReasonMessage}`;\n        }\n    }\n    else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {\n        const firstCandidate = response.candidates[0];\n        if (hadBadFinishReason(firstCandidate)) {\n            message += `Candidate was blocked due to ${firstCandidate.finishReason}`;\n            if (firstCandidate.finishMessage) {\n                message += `: ${firstCandidate.finishMessage}`;\n            }\n        }\n    }\n    return message;\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst responseLineRE = /^data\\: (.*)(?:\\n\\n|\\r\\r|\\r\\n\\r\\n)/;\n/**\n * Process a response.body stream from the backend and return an\n * iterator that provides one complete GenerateContentResponse at a time\n * and a promise that resolves with a single aggregated\n * GenerateContentResponse.\n *\n * @param response - Response from a fetch call\n */\nfunction processStream(response) {\n    const inputStream = response.body.pipeThrough(new TextDecoderStream(\"utf8\", { fatal: true }));\n    const responseStream = getResponseStream(inputStream);\n    const [stream1, stream2] = responseStream.tee();\n    return {\n        stream: generateResponseSequence(stream1),\n        response: getResponsePromise(stream2),\n    };\n}\nasync function getResponsePromise(stream) {\n    const allResponses = [];\n    const reader = stream.getReader();\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            return addHelpers(aggregateResponses(allResponses));\n        }\n        allResponses.push(value);\n    }\n}\nfunction generateResponseSequence(stream) {\n    return __asyncGenerator(this, arguments, function* generateResponseSequence_1() {\n        const reader = stream.getReader();\n        while (true) {\n            const { value, done } = yield __await(reader.read());\n            if (done) {\n                break;\n            }\n            yield yield __await(addHelpers(value));\n        }\n    });\n}\n/**\n * Reads a raw stream from the fetch response and join incomplete\n * chunks, returning a new stream that provides a single complete\n * GenerateContentResponse in each iteration.\n */\nfunction getResponseStream(inputStream) {\n    const reader = inputStream.getReader();\n    const stream = new ReadableStream({\n        start(controller) {\n            let currentText = \"\";\n            return pump();\n            function pump() {\n                return reader.read().then(({ value, done }) => {\n                    if (done) {\n                        if (currentText.trim()) {\n                            controller.error(new GoogleGenerativeAIError(\"Failed to parse stream\"));\n                            return;\n                        }\n                        controller.close();\n                        return;\n                    }\n                    currentText += value;\n                    let match = currentText.match(responseLineRE);\n                    let parsedResponse;\n                    while (match) {\n                        try {\n                            parsedResponse = JSON.parse(match[1]);\n                        }\n                        catch (e) {\n                            controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: \"${match[1]}\"`));\n                            return;\n                        }\n                        controller.enqueue(parsedResponse);\n                        currentText = currentText.substring(match[0].length);\n                        match = currentText.match(responseLineRE);\n                    }\n                    return pump();\n                });\n            }\n        },\n    });\n    return stream;\n}\n/**\n * Aggregates an array of `GenerateContentResponse`s into a single\n * GenerateContentResponse.\n */\nfunction aggregateResponses(responses) {\n    const lastResponse = responses[responses.length - 1];\n    const aggregatedResponse = {\n        promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback,\n    };\n    for (const response of responses) {\n        if (response.candidates) {\n            for (const candidate of response.candidates) {\n                const i = candidate.index;\n                if (!aggregatedResponse.candidates) {\n                    aggregatedResponse.candidates = [];\n                }\n                if (!aggregatedResponse.candidates[i]) {\n                    aggregatedResponse.candidates[i] = {\n                        index: candidate.index,\n                    };\n                }\n                // Keep overwriting, the last one will be final\n                aggregatedResponse.candidates[i].citationMetadata =\n                    candidate.citationMetadata;\n                aggregatedResponse.candidates[i].finishReason = candidate.finishReason;\n                aggregatedResponse.candidates[i].finishMessage =\n                    candidate.finishMessage;\n                aggregatedResponse.candidates[i].safetyRatings =\n                    candidate.safetyRatings;\n                /**\n                 * Candidates should always have content and parts, but this handles\n                 * possible malformed responses.\n                 */\n                if (candidate.content && candidate.content.parts) {\n                    if (!aggregatedResponse.candidates[i].content) {\n                        aggregatedResponse.candidates[i].content = {\n                            role: candidate.content.role || \"user\",\n                            parts: [],\n                        };\n                    }\n                    const newPart = {};\n                    for (const part of candidate.content.parts) {\n                        if (part.text) {\n                            newPart.text = part.text;\n                        }\n                        if (part.functionCall) {\n                            newPart.functionCall = part.functionCall;\n                        }\n                        if (Object.keys(newPart).length === 0) {\n                            newPart.text = \"\";\n                        }\n                        aggregatedResponse.candidates[i].content.parts.push(newPart);\n                    }\n                }\n            }\n        }\n    }\n    return aggregatedResponse;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function generateContentStream(apiKey, model, params, requestOptions) {\n    const url = new RequestUrl(model, Task.STREAM_GENERATE_CONTENT, apiKey, \n    /* stream */ true, requestOptions);\n    const response = await makeRequest(url, JSON.stringify(params), requestOptions);\n    return processStream(response);\n}\nasync function generateContent(apiKey, model, params, requestOptions) {\n    const url = new RequestUrl(model, Task.GENERATE_CONTENT, apiKey, \n    /* stream */ false, requestOptions);\n    const response = await makeRequest(url, JSON.stringify(params), requestOptions);\n    const responseJson = await response.json();\n    const enhancedResponse = addHelpers(responseJson);\n    return {\n        response: enhancedResponse,\n    };\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction formatNewContent(request) {\n    let newParts = [];\n    if (typeof request === \"string\") {\n        newParts = [{ text: request }];\n    }\n    else {\n        for (const partOrString of request) {\n            if (typeof partOrString === \"string\") {\n                newParts.push({ text: partOrString });\n            }\n            else {\n                newParts.push(partOrString);\n            }\n        }\n    }\n    return assignRoleToPartsAndValidateSendMessageRequest(newParts);\n}\n/**\n * When multiple Part types (i.e. FunctionResponsePart and TextPart) are\n * passed in a single Part array, we may need to assign different roles to each\n * part. Currently only FunctionResponsePart requires a role other than 'user'.\n * @private\n * @param parts Array of parts to pass to the model\n * @returns Array of content items\n */\nfunction assignRoleToPartsAndValidateSendMessageRequest(parts) {\n    const userContent = { role: \"user\", parts: [] };\n    const functionContent = { role: \"function\", parts: [] };\n    let hasUserContent = false;\n    let hasFunctionContent = false;\n    for (const part of parts) {\n        if (\"functionResponse\" in part) {\n            functionContent.parts.push(part);\n            hasFunctionContent = true;\n        }\n        else {\n            userContent.parts.push(part);\n            hasUserContent = true;\n        }\n    }\n    if (hasUserContent && hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"Within a single message, FunctionResponse cannot be mixed with other type of part in the request for sending chat message.\");\n    }\n    if (!hasUserContent && !hasFunctionContent) {\n        throw new GoogleGenerativeAIError(\"No content is provided for sending chat message.\");\n    }\n    if (hasUserContent) {\n        return userContent;\n    }\n    return functionContent;\n}\nfunction formatGenerateContentInput(params) {\n    if (params.contents) {\n        return params;\n    }\n    else {\n        const content = formatNewContent(params);\n        return { contents: [content] };\n    }\n}\nfunction formatEmbedContentInput(params) {\n    if (typeof params === \"string\" || Array.isArray(params)) {\n        const content = formatNewContent(params);\n        return { content };\n    }\n    return params;\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// https://ai.google.dev/api/rest/v1beta/Content#part\nconst VALID_PART_FIELDS = [\n    \"text\",\n    \"inlineData\",\n    \"functionCall\",\n    \"functionResponse\",\n];\nconst VALID_PARTS_PER_ROLE = {\n    user: [\"text\", \"inlineData\"],\n    function: [\"functionResponse\"],\n    model: [\"text\", \"functionCall\"],\n};\nconst VALID_PREVIOUS_CONTENT_ROLES = {\n    user: [\"model\"],\n    function: [\"model\"],\n    model: [\"user\", \"function\"],\n};\nfunction validateChatHistory(history) {\n    let prevContent;\n    for (const currContent of history) {\n        const { role, parts } = currContent;\n        if (!prevContent && role !== \"user\") {\n            throw new GoogleGenerativeAIError(`First content should be with role 'user', got ${role}`);\n        }\n        if (!POSSIBLE_ROLES.includes(role)) {\n            throw new GoogleGenerativeAIError(`Each item should include role field. Got ${role} but valid roles are: ${JSON.stringify(POSSIBLE_ROLES)}`);\n        }\n        if (!Array.isArray(parts)) {\n            throw new GoogleGenerativeAIError(\"Content should have 'parts' property with an array of Parts\");\n        }\n        if (parts.length === 0) {\n            throw new GoogleGenerativeAIError(\"Each Content should have at least one part\");\n        }\n        const countFields = {\n            text: 0,\n            inlineData: 0,\n            functionCall: 0,\n            functionResponse: 0,\n        };\n        for (const part of parts) {\n            for (const key of VALID_PART_FIELDS) {\n                if (key in part) {\n                    countFields[key] += 1;\n                }\n            }\n        }\n        const validParts = VALID_PARTS_PER_ROLE[role];\n        for (const key of VALID_PART_FIELDS) {\n            if (!validParts.includes(key) && countFields[key] > 0) {\n                throw new GoogleGenerativeAIError(`Content with role '${role}' can't contain '${key}' part`);\n            }\n        }\n        if (prevContent) {\n            const validPreviousContentRoles = VALID_PREVIOUS_CONTENT_ROLES[role];\n            if (!validPreviousContentRoles.includes(prevContent.role)) {\n                throw new GoogleGenerativeAIError(`Content with role '${role}' can't follow '${prevContent.role}'. Valid previous roles: ${JSON.stringify(VALID_PREVIOUS_CONTENT_ROLES)}`);\n            }\n        }\n        prevContent = currContent;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Do not log a message for this error.\n */\nconst SILENT_ERROR = \"SILENT_ERROR\";\n/**\n * ChatSession class that enables sending chat messages and stores\n * history of sent and received messages so far.\n *\n * @public\n */\nclass ChatSession {\n    constructor(apiKey, model, params, requestOptions) {\n        this.model = model;\n        this.params = params;\n        this.requestOptions = requestOptions;\n        this._history = [];\n        this._sendPromise = Promise.resolve();\n        this._apiKey = apiKey;\n        if (params === null || params === void 0 ? void 0 : params.history) {\n            validateChatHistory(params.history);\n            this._history = params.history;\n        }\n    }\n    /**\n     * Gets the chat history so far. Blocked prompts are not added to history.\n     * Blocked candidates are not added to history, nor are the prompts that\n     * generated them.\n     */\n    async getHistory() {\n        await this._sendPromise;\n        return this._history;\n    }\n    /**\n     * Sends a chat message and receives a non-streaming\n     * {@link GenerateContentResult}\n     */\n    async sendMessage(request) {\n        var _a, _b, _c;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            contents: [...this._history, newContent],\n        };\n        let finalResult;\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise\n            .then(() => generateContent(this._apiKey, this.model, generateContentRequest, this.requestOptions))\n            .then((result) => {\n            var _a;\n            if (result.response.candidates &&\n                result.response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({ parts: [], \n                    // Response seems to come back without a role set.\n                    role: \"model\" }, (_a = result.response.candidates) === null || _a === void 0 ? void 0 : _a[0].content);\n                this._history.push(responseContent);\n            }\n            else {\n                const blockErrorMessage = formatBlockErrorMessage(result.response);\n                if (blockErrorMessage) {\n                    console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n                }\n            }\n            finalResult = result;\n        });\n        await this._sendPromise;\n        return finalResult;\n    }\n    /**\n     * Sends a chat message and receives the response as a\n     * {@link GenerateContentStreamResult} containing an iterable stream\n     * and a response promise.\n     */\n    async sendMessageStream(request) {\n        var _a, _b, _c;\n        await this._sendPromise;\n        const newContent = formatNewContent(request);\n        const generateContentRequest = {\n            safetySettings: (_a = this.params) === null || _a === void 0 ? void 0 : _a.safetySettings,\n            generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,\n            tools: (_c = this.params) === null || _c === void 0 ? void 0 : _c.tools,\n            contents: [...this._history, newContent],\n        };\n        const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest, this.requestOptions);\n        // Add onto the chain.\n        this._sendPromise = this._sendPromise\n            .then(() => streamPromise)\n            // This must be handled to avoid unhandled rejection, but jump\n            // to the final catch block with a label to not log this error.\n            .catch((_ignored) => {\n            throw new Error(SILENT_ERROR);\n        })\n            .then((streamResult) => streamResult.response)\n            .then((response) => {\n            if (response.candidates && response.candidates.length > 0) {\n                this._history.push(newContent);\n                const responseContent = Object.assign({}, response.candidates[0].content);\n                // Response seems to come back without a role set.\n                if (!responseContent.role) {\n                    responseContent.role = \"model\";\n                }\n                this._history.push(responseContent);\n            }\n            else {\n                const blockErrorMessage = formatBlockErrorMessage(response);\n                if (blockErrorMessage) {\n                    console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);\n                }\n            }\n        })\n            .catch((e) => {\n            // Errors in streamPromise are already catchable by the user as\n            // streamPromise is returned.\n            // Avoid duplicating the error message in logs.\n            if (e.message !== SILENT_ERROR) {\n                // Users do not have access to _sendPromise to catch errors\n                // downstream from streamPromise, so they should not throw.\n                console.error(e);\n            }\n        });\n        return streamPromise;\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function countTokens(apiKey, model, params, requestOptions) {\n    const url = new RequestUrl(model, Task.COUNT_TOKENS, apiKey, false, {});\n    const response = await makeRequest(url, JSON.stringify(Object.assign(Object.assign({}, params), { model })), requestOptions);\n    return response.json();\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nasync function embedContent(apiKey, model, params, requestOptions) {\n    const url = new RequestUrl(model, Task.EMBED_CONTENT, apiKey, false, {});\n    const response = await makeRequest(url, JSON.stringify(params), requestOptions);\n    return response.json();\n}\nasync function batchEmbedContents(apiKey, model, params, requestOptions) {\n    const url = new RequestUrl(model, Task.BATCH_EMBED_CONTENTS, apiKey, false, {});\n    const requestsWithModel = params.requests.map((request) => {\n        return Object.assign(Object.assign({}, request), { model });\n    });\n    const response = await makeRequest(url, JSON.stringify({ requests: requestsWithModel }), requestOptions);\n    return response.json();\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class for generative model APIs.\n * @public\n */\nclass GenerativeModel {\n    constructor(apiKey, modelParams, requestOptions) {\n        this.apiKey = apiKey;\n        if (modelParams.model.includes(\"/\")) {\n            // Models may be named \"models/model-name\" or \"tunedModels/model-name\"\n            this.model = modelParams.model;\n        }\n        else {\n            // If path is not included, assume it's a non-tuned model.\n            this.model = `models/${modelParams.model}`;\n        }\n        this.generationConfig = modelParams.generationConfig || {};\n        this.safetySettings = modelParams.safetySettings || [];\n        this.tools = modelParams.tools;\n        this.requestOptions = requestOptions || {};\n    }\n    /**\n     * Makes a single non-streaming call to the model\n     * and returns an object containing a single {@link GenerateContentResponse}.\n     */\n    async generateContent(request) {\n        const formattedParams = formatGenerateContentInput(request);\n        return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools }, formattedParams), this.requestOptions);\n    }\n    /**\n     * Makes a single streaming call to the model\n     * and returns an object containing an iterable stream that iterates\n     * over all chunks in the streaming response as well as\n     * a promise that returns the final aggregated response.\n     */\n    async generateContentStream(request) {\n        const formattedParams = formatGenerateContentInput(request);\n        return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings, tools: this.tools }, formattedParams), this.requestOptions);\n    }\n    /**\n     * Gets a new {@link ChatSession} instance which can be used for\n     * multi-turn chats.\n     */\n    startChat(startChatParams) {\n        return new ChatSession(this.apiKey, this.model, Object.assign({ tools: this.tools }, startChatParams), this.requestOptions);\n    }\n    /**\n     * Counts the tokens in the provided request.\n     */\n    async countTokens(request) {\n        const formattedParams = formatGenerateContentInput(request);\n        return countTokens(this.apiKey, this.model, formattedParams);\n    }\n    /**\n     * Embeds the provided content.\n     */\n    async embedContent(request) {\n        const formattedParams = formatEmbedContentInput(request);\n        return embedContent(this.apiKey, this.model, formattedParams);\n    }\n    /**\n     * Embeds an array of {@link EmbedContentRequest}s.\n     */\n    async batchEmbedContents(batchEmbedContentRequest) {\n        return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest, this.requestOptions);\n    }\n}\n\n/**\n * @license\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Top-level class for this SDK\n * @public\n */\nclass GoogleGenerativeAI {\n    constructor(apiKey) {\n        this.apiKey = apiKey;\n    }\n    /**\n     * Gets a {@link GenerativeModel} instance for the provided model name.\n     */\n    getGenerativeModel(modelParams, requestOptions) {\n        if (!modelParams.model) {\n            throw new GoogleGenerativeAIError(`Must provide a model name. ` +\n                `Example: genai.getGenerativeModel({ model: 'my-model-name' })`);\n        }\n        return new GenerativeModel(this.apiKey, modelParams, requestOptions);\n    }\n}\n\nexport { BlockReason, ChatSession, FinishReason, FunctionDeclarationSchemaType, GenerativeModel, GoogleGenerativeAI, HarmBlockThreshold, HarmCategory, HarmProbability, POSSIBLE_ROLES, TaskType };\n//# sourceMappingURL=index.mjs.map\n"],"names":["$75df8972f0c81699$export$6c058c768f62ff69","HarmCategory","$75df8972f0c81699$export$798c77e44df53af3","HarmBlockThreshold","$75df8972f0c81699$export$b0bfc55fdde52aac","HarmProbability","$75df8972f0c81699$export$d51a615154b7f9a","BlockReason","$75df8972f0c81699$export$b022a9988c1688ba","FinishReason","$75df8972f0c81699$export$e94f0100e6b2fa1a","TaskType","$75df8972f0c81699$export$1f8b1cab05cab788","FunctionDeclarationSchemaType","$75df8972f0c81699$export$c6b94de590fea217","$75df8972f0c81699$var$GoogleGenerativeAIError","Error","constructor","message","$75df8972f0c81699$var$GoogleGenerativeAIResponseError","response","Task","$75df8972f0c81699$var$Task","$75df8972f0c81699$var$RequestUrl","model","task","apiKey","stream","requestOptions","toString","_a","apiVersion","url","$75df8972f0c81699$var$makeRequest","body","fetch","Object","assign","$75df8972f0c81699$var$buildFetchOptions","fetchOptions","timeout","abortController","AbortController","signal","setTimeout","abort","method","headers","ok","json","error","details","JSON","stringify","e","status","statusText","err","stack","$75df8972f0c81699$var$addHelpers","text","candidates","length","_b","_c","_d","console","warn","$75df8972f0c81699$var$hadBadFinishReason","$75df8972f0c81699$var$formatBlockErrorMessage","content","parts","map","join","promptFeedback","functionCall","$75df8972f0c81699$var$badFinishReasons","RECITATION","SAFETY","candidate","finishReason","includes","blockReason","blockReasonMessage","firstCandidate","finishMessage","$75df8972f0c81699$var$__await","v","SuppressedError","$75df8972f0c81699$var$responseLineRE","$75df8972f0c81699$var$getResponsePromise","allResponses","reader","getReader","done","value","read","$75df8972f0c81699$var$aggregateResponses","responses","lastResponse","aggregatedResponse","i","index","citationMetadata","safetyRatings","role","newPart","part","keys","push","$75df8972f0c81699$var$generateContentStream","params","STREAM_GENERATE_CONTENT","$75df8972f0c81699$var$processStream","stream1","stream2","responseStream","$75df8972f0c81699$var$getResponseStream","inputStream","ReadableStream","start","controller","currentText","pump","then","parsedResponse","trim","close","match","parse","enqueue","substring","pipeThrough","TextDecoderStream","fatal","tee","$75df8972f0c81699$var$generateResponseSequence","$75df8972f0c81699$var$__asyncGenerator","thisArg","_arguments","generator","Symbol","asyncIterator","TypeError","g","apply","q","verb","n","Promise","a","b","resume","r","resolve","fulfill","reject","settle","f","shift","arguments","$75df8972f0c81699$var$generateContent","GENERATE_CONTENT","$75df8972f0c81699$var$formatNewContent","request","newParts","partOrString","$75df8972f0c81699$var$assignRoleToPartsAndValidateSendMessageRequest","userContent","functionContent","hasUserContent","hasFunctionContent","$75df8972f0c81699$var$formatGenerateContentInput","contents","$75df8972f0c81699$var$VALID_PART_FIELDS","$75df8972f0c81699$var$VALID_PARTS_PER_ROLE","user","function","$75df8972f0c81699$var$VALID_PREVIOUS_CONTENT_ROLES","$75df8972f0c81699$var$SILENT_ERROR","$75df8972f0c81699$export$468095fbe5978cf0","_history","_sendPromise","_apiKey","history","$75df8972f0c81699$var$validateChatHistory","prevContent","currContent","Array","isArray","countFields","inlineData","functionResponse","key","validParts","validPreviousContentRoles","getHistory","sendMessage","finalResult","newContent","generateContentRequest","safetySettings","generationConfig","tools","result","responseContent","blockErrorMessage","sendMessageStream","streamPromise","catch","_ignored","streamResult","$75df8972f0c81699$var$countTokens","COUNT_TOKENS","$75df8972f0c81699$var$embedContent","EMBED_CONTENT","$75df8972f0c81699$var$batchEmbedContents","BATCH_EMBED_CONTENTS","requestsWithModel","requests","$75df8972f0c81699$export$a1cda57d165c63f4","modelParams","generateContent","formattedParams","generateContentStream","startChat","startChatParams","countTokens","embedContent","batchEmbedContents","batchEmbedContentRequest","$f4f7efb374b8cc1a$var$body","document","$f4f7efb374b8cc1a$var$btn","createElement","setAttribute","appendChild","addEventListener","toggleAttribute","hasAttribute","$f4f7efb374b8cc1a$var$recognition","stop","window","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","onresult","event","data","results","transcript","removeAttribute","$f4f7efb374b8cc1a$var$generateResponse","toLowerCase","prompt","log","$f4f7efb374b8cc1a$var$genAI","getGenerativeModel","$f4f7efb374b8cc1a$var$generateLink","Linkprompt","responseText","linksToShow","links","location","href","ctrlKey","code","click"],"version":3,"file":"script.js.map"}